import os
import sys
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from apscheduler.schedulers.asyncio import AsyncIOScheduler

ENV_FILE = ".env"

def load_or_create_env():
    try:
        from dotenv import load_dotenv
        load_dotenv(ENV_FILE)
    except ImportError:
        pass

    api_token = os.getenv("API_TOKEN")
    chat_id_env = os.getenv("CHAT_ID")
    poll_time = os.getenv("POLL_TIME", "12:00")       # –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–æ—Å–∞
    poll_duration = os.getenv("POLL_DURATION", "60")   # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö

    updated = False
    if not api_token:
        api_token = input("üëâ –í–≤–µ–¥–∏ API_TOKEN: ").strip()
        updated = True

    if not chat_id_env:
        chat_id_env = input("üëâ –í–≤–µ–¥–∏ CHAT_ID: ").strip()
        updated = True

    if updated:
        with open(ENV_FILE, "w", encoding="utf-8") as f:
            f.write(f"API_TOKEN={api_token}\n")
            f.write(f"CHAT_ID={chat_id_env}\n")
            f.write(f"POLL_TIME={poll_time}\n")
            f.write(f"POLL_DURATION={poll_duration}\n")
        print(f"‚úÖ –§–∞–π–ª {ENV_FILE} —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω")

    try:
        chat_id_int = int(chat_id_env)
    except ValueError:
        print("‚ùå CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        sys.exit(1)

    try:
        poll_duration_int = int(poll_duration)
    except ValueError:
        print("‚ùå POLL_DURATION –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –º–∏–Ω—É—Ç")
        sys.exit(1)

    return api_token, chat_id_int, poll_time, poll_duration_int

API_TOKEN, CHAT_ID, POLL_TIME, POLL_DURATION = load_or_create_env()

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≥–æ–ª–æ—Å–æ–≤
poll_votes = {}  # {poll_id: {"plus": 0, "minus": 0}}

async def send_poll():
    """–°–æ–∑–¥–∞—ë—Ç –æ–ø—Ä–æ—Å –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç—á—ë—Ç–∞"""
    tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d.%m")
    question = f"–õ–∞–Ω—á –Ω–∞ {tomorrow}?"
    options = ["+", "-"]

    poll_msg = await bot.send_poll(
        chat_id=CHAT_ID,
        question=question,
        options=options,
        is_anonymous=False,
        open_period=POLL_DURATION*60  # –í —Å–µ–∫—É–Ω–¥–∞—Ö
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≥–æ–ª–æ—Å–æ–≤
    poll_votes[poll_msg.poll.id] = {"plus": 0, "minus": 0}

    print(f"üì¢ –û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {question} | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {POLL_DURATION} –º–∏–Ω | –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")

    # –ñ–¥—ë–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
    await asyncio.sleep(POLL_DURATION*60)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
    votes = poll_votes.pop(poll_msg.poll.id, {"plus": 0})
    plus_count = votes["plus"]

    report = (
        "–°–±–æ—Ä–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ\n"
        f"–õ–∞–Ω—á –Ω–∞ {tomorrow}\n"
        f"{plus_count} —à—Ç"
    )

    await bot.send_message(CHAT_ID, report)
    print(f"üìä –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç | +: {plus_count} —à—Ç | –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")

@dp.poll_answer()
async def handle_poll_answer(poll_answer: types.PollAnswer):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    poll_id = poll_answer.poll_id
    if poll_id not in poll_votes:
        return

    plus_count = 0
    minus_count = 0
    for idx in poll_answer.option_ids:
        if idx == 0:
            plus_count += 1
        elif idx == 1:
            minus_count += 1

    poll_votes[poll_id]["plus"] = plus_count
    poll_votes[poll_id]["minus"] = minus_count

async def scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–æ—Å–∞"""
    scheduler = AsyncIOScheduler(timezone="Europe/Kiev")
    try:
        hour, minute = map(int, POLL_TIME.split(":"))
    except ValueError:
        print("‚ùå POLL_TIME –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")
        sys.exit(1)

    scheduler.add_job(send_poll, "cron", hour=hour, minute=minute)
    scheduler.start()

    print(f"üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    print(f"‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ {hour:02d}:{minute:02d} –∏ –¥–ª–∏—Ç—å—Å—è {POLL_DURATION} –º–∏–Ω")

async def main():
    await scheduler()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
